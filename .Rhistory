y = ~wday(OccurToDate),
z = tabs
),
) %>%
add_histogram2d(colorscale = "Reds")
plot_ly(
data = (df %>% mutate(hour = substr(
str_pad(OccurToTime, 4, pad = 0),
1, 2))),
x = ~hour,
y = ~wday(OccurToDate),
z = tabs
) %>%
add_histogram2d(colorscale = "Reds")
plot_ly(
data = (df %>% mutate(hour = substr(
str_pad(OccurToTime, 4, pad = 0),
1, 2))),
x = ~hour,
y = ~wday(OccurToDate),
z = tabs
) %>%
add_histogram2d(colorscale = "Reds",
showlegend = FALSE)
plot_ly(
data = (df %>% mutate(hour = substr(
str_pad(OccurToTime, 4, pad = 0),
1, 2))),
x = ~hour,
y = ~wday(OccurToDate),
z = tabs
) %>%
add_histogram2d(colorscale = "Reds",
showscale = FALSE)
bananas <- plot_ly(
data = (df %>% mutate(hour = substr(
str_pad(OccurToTime, 4, pad = 0),
1, 2))),
x = ~hour,
y = ~wday(OccurToDate),
z = tabs
) %>%
add_histogram2d(colorscale = "Reds",
showscale = FALSE)
bananas
getwd()
htmlwidgets::saveWidget(bananas, "bananas.html")
install.packages("leaflet")
install.packages("htmlWidgets")
install.packages("htmlwidgets")
library(htmlwidgets)
library(htmlwidgets)
htmlwidgets::base_dir()
list.files("Z:/Projects/dashboard/RPDCrimeDashboard")
start <- Sys.time()
rm(start)
# Read in previously-created list of maps; keep only the relevant section one
sectionmap <- readRDS("Z:/Projects/dashboard/RPDCrimeDashboard/Objects/sectionmaplist.RDS")[params$sectionname][[1]]
curr.year <- as.numeric(format(Sys.Date(), '%Y')) ### This current year to automatically reference the current year
begindate <- paste0(curr.year, '-01-01') ### For CFS to automatically create the begindate based on current year
#sevenDayGroupTable is a lookup table to get the current week (Group) from the date
#Because it uses length(Date) from seq.Date, it should work even in leap years
sevenDayGroupTable <- data.frame(Date = seq.Date(from = as.Date(begindate),
to = as.Date(paste0(curr.year, "-12-31")),
by = 1)) %>%
mutate(DOY = 1:length(Date),
Group = c(rep(1:51, each = 7),
rep(52, times = length(Date) - 357)))
library(knitr)
library(flexdashboard)
library(RColorBrewer)
library(stringr)
library(ggplot2)
library(plotly)
library(KernSmooth)
library(raster)
library(leaflet)
library(dplyr)
library(reshape2)
library(jsonlite)
library(tidyr)
library(DT)
library(RODBC)
library(treemap)
library(d3treeR)
library(RColorBrewer)
source("Z:/Projects/dashboard/RPDCrimeDashboard/Functions/aoristicDayWeek.R")
source("Z:/Projects/dashboard/RPDCrimeDashboard/Functions/guntablenest.R")
source("Z:/Projects/dashboard/RPDCrimeDashboard/Functions/kerntorast.R")
source("Z:/Projects/dashboard/RPDCrimeDashboard/Functions/hotspotMap.R")
source("Z:/Projects/dashboard/RPDCrimeDashboard/Functions/hotspotMapSV.R")
source("Z:/Projects/dashboard/RPDCrimeDashboard/Functions/LERMS_incidents.R")
source("Z:/Projects/dashboard/RPDCrimeDashboard/Functions/nestedbeattable.R")
source("Z:/Projects/dashboard/RPDCrimeDashboard/Functions/plotlyhmap.R")
source("Z:/Projects/dashboard/RPDCrimeDashboard/Functions/SPC.R")
source("Z:/Projects/dashboard/RPDCrimeDashboard/Functions/pullMCUdata.R")
source("Z:/Projects/dashboard/RPDCrimeDashboard/Functions/loadshootingvictims.R")
source("Z:/Projects/dashboard/RPDCrimeDashboard/Functions/CFSloc.R")
simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1,1)), tolower(substring(s, 2)),
sep = "", collapse = " ")
}
sectionsmatch <- data.frame(section = c(1, 3, 5, 7, 9),
sectionname = c("Lake", "Genesee", "Goodman", "Clinton", "Central"),
# lng1 = c(-77.617488, -77.604633, -77.615712, -77.575370, -77.592894),
# lat1 = c(43.158172, 43.114570, 43.124344, 43.159093, 43.138862),
# lng2 = c(-77.668684, -77.686093, -77.522970, -77.626865, -77.635598),
# lat2 = c(43.264020, 43.159699, 43.237813, 43.257633, 43.165201),
stringsAsFactors = FALSE)
section <- sectionsmatch[match(params$sectionname, sectionsmatch$sectionname),"section"]
# lng1FB <- sectionsmatch[match(params$sectionname, sectionsmatch$sectionname), "lng1"]
# lat1FB <- sectionsmatch[match(params$sectionname, sectionsmatch$sectionname), "lat1"]
# lng2FB <- sectionsmatch[match(params$sectionname, sectionsmatch$sectionname), "lng2"]
# lat2FB <- sectionsmatch[match(params$sectionname, sectionsmatch$sectionname), "lat2"]
overviewPlot <- function(control = controllimits %>% filter(Crime == "Firearm"),
spcObj = firearmSPC,
dat = histdata %>% filter(CrimeType == "Firearm"),
currentyear = curr.year,
title = "Historical Counts for Firearm Crime"
) {
q <- dat %>%
plot_ly(
x = ~Yr,
y = ~Counts,
type = "scatter",
mode = "lines+markers",
line = list(color = "black"),
name = "Historical",
hoverinfo = "name+x+y",
hoverlabel = list(bgcolor = "white", font = list(color = "black"))) %>%
add_trace(data = control,
x = ~Year,
y = ~LowerLimit,
type = "scatter",
mode = "lines",
line = list(color = "grey", dash = "dash"),
name = "Lower Limit",
hoverinfo = "name+y",
hoverlabel = list(bgcolor = "white", font = list(color = "black"))) %>%
add_trace(data = control,
x = ~Year,
y = ~UpperLimit,
type = "scatter",
mode = "lines",
line = list(color = "grey", dash = "dash"),
name = "Upper Limit",
hoverinfo = "name+y",
hoverlabel = list(bgcolor = "white", font = list(color = "black"))) %>%
add_trace(data = spcObj[[5]] %>% group_by(Value) %>% count(),
x = curr.year,
y = ~Value,
type = "scatter",
mode = "markers",
marker = list(color = "grey"),
size = ~n,
opacity = .3,
name = "Sims",
hovertext = ~paste0(n, " of 1000 sims result in ", Value, " at year end."),
hoverinfo = "text",
hoverlabel = list(bgcolor = "white", font = list(color = "black"))) %>%
add_trace(x = currentyear,
y = mean(spcObj[[5]]$Value),
type = "scatter",
mode = "markers",
name = "Avg sim",
hoverinfo = "name",
marker = list(size = 10, color = "blue")) %>%
layout(showlegend = FALSE,
xaxis = list(title = ""),
yaxis = list(title = ""),
title = title)
return(q)
}
# Read in previously-created list of maps; keep only the relevant section one
sectionmap <- readRDS("Z:/Projects/dashboard/RPDCrimeDashboard/Objects/sectionmaplist.RDS")[params$sectionname][[1]]
curr.year <- as.numeric(format(Sys.Date(), '%Y')) ### This current year to automatically reference the current year
begindate <- paste0(curr.year, '-01-01') ### For CFS to automatically create the begindate based on current year
#sevenDayGroupTable is a lookup table to get the current week (Group) from the date
#Because it uses length(Date) from seq.Date, it should work even in leap years
sevenDayGroupTable <- data.frame(Date = seq.Date(from = as.Date(begindate),
to = as.Date(paste0(curr.year, "-12-31")),
by = 1)) %>%
mutate(DOY = 1:length(Date),
Group = c(rep(1:51, each = 7),
rep(52, times = length(Date) - 357)))
curr.week <- sevenDayGroupTable$Group[match(as.numeric(format(Sys.Date(),
'%j')),
sevenDayGroupTable$DOY)] - 1
firearm.desc <- trimws(c('Prohibited Use of Weapon City Limits',
'Use of Dangerous Weapon',
'Criminal Use Firearm 1st: Commit Violent Class B Felony',
'Discharges Loaded Firearm',
'Use Firearm 1st: Possess a Deadly Weapon-Loaded',
'Criminal Use Firearm 2nd: Possess Deadly Weapon: Loaded',
'Use Firearm 1st: Display Firearm',
'Criminal Use Firearm 2nd: Display Firearm'))
firearmCrimeTypes <- c("Aggravated Assault", "Robbery", "Homicide", "Rape", "Simple Assault")
#load in RPD's crime data
df <- readRDS("Z:/Projects/dashboard/RPDCrimeDashboard/Objects/sectiondflist.RDS")[params$sectionname][[1]]
#use beatNames to make factor levels for beats
beatNames <- df %>%
dplyr::select(GEOBeat) %>%
unique() %>%
filter(! grepl(x = GEOBeat, pattern = "\\*")) %>% #remove *** as a beat name
arrange(substr(GEOBeat, 3, 3), GEOBeat) %>%
mutate(GEOBeat = as.factor(GEOBeat)) #this keeps *** as a factor level
CPWs <- df %>% filter(CrimeType == "Dangerous Weapons" &
!trimws(Description) %in% firearm.desc &
as.numeric(WeaponIBRValue) < 11) %>%
mutate(OccurFromDate = as.character(OccurFromDate)) #for table display purposes
crimes <- c('Aggravated Assault', 'Arson', 'Burglary', 'Homicide', 'Larceny', 'MV Theft', 'Rape', 'Robbery', 'Firearm')
sec <- c('Lake', 'Genesee', 'Goodman', 'Clinton', 'Central')
pal <- brewer.pal(name = "Reds", n = 9)
PropVals <- read.csv("Z:/Projects/dashboard/RPDCrimeDashboard/Objects/ProportionsAndCounts.csv",
header= T) %>%
filter(Section == params$sectionname)
ShootingControlLimits <- readr::read_csv("Z:/Projects/dashboard/RPDCrimeDashboard/Objects/3YrWeightedControlLimitsShootings.csv") %>%
filter(Section == params$sectionname)
ShootingProps <- readr::read_csv("Z:/Projects/dashboard/RPDCrimeDashboard/Objects/ProportionsAndCountsShootings.csv") %>%
dplyr::filter(Section == params$sectionname)
histdata <- readr::read_csv(file = "Z:/Projects/dashboard/RPDCrimeDashboard/Objects/historicaldata.csv") %>%
dplyr::filter(Section == section)
controllimits <- readr::read_csv(file = "Z:/Projects/dashboard/RPDCrimeDashboard/Objects//3YrWeightedControlLimits.csv") %>%
dplyr::filter(Section == params$sectionname)
controllimits <- rbind(data.frame(controllimits, Year = 2017),
data.frame(controllimits, Year = 2018),
data.frame(controllimits, Year = 2019))
mculist <- pullMCUdata()
MCUhoms <- mculist[[1]] %>%
filter(Section == params$sectionname) %>%
mutate(CrimeType = "Homicide",
DateOfEvent = as.Date(DateOfEvent, format = "%Y-%m-%d"),
DOYofEvent = as.numeric(format(DateOfEvent, "%j")),
YearofEvent = as.numeric(format(DateOfEvent, "%Y")),
CaseStatus = unname(sapply(CaseStatus, simpleCap))) %>%
filter(YearofEvent == curr.year) %>%
rename(sec = Section,
Lat = Latitude,
Lon = Longitude,
FullAddress = Address) %>%
left_join(sevenDayGroupTable, by = c("DOYofEvent" = "DOY")) %>%
dplyr::select(-Date) %>%
dplyr::rename("SevenDaysGroup" = Group)
person <- mculist[[2]]
rm(mculist)
personincident <- left_join(MCUhoms, person, by = "CaseNumber")
sv <- loadshootingvictims()
drops <- c("Lat", "Lon")
svjoined <- left_join(x = sv, y = df, by = c("CaseNumber" = "CRNum")) %>%
dplyr::select(-one_of(drops)) %>%
rename(Lat = Latitude, Lon = Longitude) %>%
filter(sec == params$sectionname)
rm(sv)
loc <- CFSloc()
#Exclude is for later use, excluding from hotspots/mapping/etc
exclude <- c("630 North Clinton Ave, Rochester, NY, 14605",
"185 Exchange Blvd, Rochester, NY, 14614",
"1099 Jay St, Rochester, NY, 14611")
sectionSPC <- readRDS("Z:/Projects/dashboard/RPDCrimeDashboard/Objects/sectionSPClist.RDS")[params$sectionname][[1]]
firearmSPC <- sectionSPC$Firearm
svSPC <- sectionSPC$SV
homicideSPC <- sectionSPC$Homicide
rapeSPC <- sectionSPC$Rape
robSPC <- sectionSPC$Rob
asltSPC <- sectionSPC$Aslt
burgSPC <- sectionSPC$Burg
larcSPC <- sectionSPC$Larc
odbcCloseAll()
#Check to make sure this year's firearm homicides are in the firearm data
if(nrow(MCUhoms) > 0){
MCUhoms$CaseNumber <- paste0("20",
substr(MCUhoms$CaseNumber, 1, 3),
"00",
substr(MCUhoms$CaseNumber, 4, 9))
}
firearmhoms <- MCUhoms %>%
filter(YearofEvent == curr.year, WeaponType == "Firearm")
# if(any(! firearmhoms$CaseNumber %in% filter(df, Firearm == "Firearm"))){
#     cat("There are firearm homicides that do not appear in the firearm data due to LERMS issues.")
# }
tab <- data.frame(CrimeTypes = c("Firearm crime", "Shootings", "Robbery",
"Aggravated Assault", "Burglary", "Larceny"),
Counts = c(firearmSPC[[4]], svSPC[[4]], robSPC[[4]],
asltSPC[[4]], burgSPC[[4]], larcSPC[[4]]),
RiskOfRed = c(firearmSPC[[2]], svSPC[[2]], robSPC[[2]],
asltSPC[[2]], burgSPC[[2]], larcSPC[[2]]),
ChanceOfGreen = c(firearmSPC[[3]], svSPC[[3]], robSPC[[3]],
asltSPC[[3]], burgSPC[[3]], larcSPC[[3]]))
#knitr::kable(tab, col.names = c("Crime Types",
#                                "YTD Totals",
#                                "% chance of exceeding upper action limit",
#                                "% chance of beating lower action limit"))
DT::datatable(tab,
rownames = FALSE,
colnames = c("Crime Types",
"YTD Totals",
"% chance of exceeding upper action limit",
"% chance of beating lower action limit"),
options = list(dom = 'tf',
columnDefs = list(list(className = 'dt-right', targets = 0:3))))
CrimeTypes <- c("Aggravated Assault", "Burglary", "Homicide", "Larceny",
"MV Theft", "Rape", "Robbery", "Dangerous Weapons")
treedata <- df %>%
filter(CrimeType %in% CrimeTypes) %>%
filter(SevenDaysGroup %in% 1:curr.week) %>%
count(CrimeType = CrimeType,
Clearance = ClearanceStatusValue,
Closure = CaseStatusValue) %>%
ungroup() %>%
group_by(CrimeType) %>%
mutate(CrimeTypeCount = sum(n)) %>%
group_by(CrimeType, Closure) %>%
mutate(ClosureCount = sum(n)) %>%
ungroup() %>%
mutate(CrimeType = paste0(CrimeType, " (",
CrimeTypeCount, ", ",
round(100 * CrimeTypeCount / sum(n), 2),
"%)  "),
Closure = paste0(Closure, " (",
ClosureCount, ", ",
round(100 * ClosureCount / CrimeTypeCount, 2),
"%)  "),
Clearance = paste0(Clearance, " (",
n, ", ",
round(100 * n / ClosureCount, 2),
"%)"))
pdf(NULL)
clearanceTreeMap <- d3tree2(
treemap(
treedata,
index = c("CrimeType", "Closure", "Clearance"),
vSize = "n",
draw = FALSE),
rootname = "Total"
)
clearanceTreeMap
firearmcontrol <- filter(controllimits, Crime == "Firearm")
SimsAvg <- mean(firearmSPC[[5]]$Value)
overviewPlot(control = controllimits %>% filter(Crime == "Firearm"),
spcObj = firearmSPC,
dat = histdata %>% filter(CrimeType == "Firearm"),
currentyear = curr.year,
title = "Historical Counts for Firearm Crime")
overviewPlot(control = ShootingControlLimits,
spcObj = svSPC,
dat = histdata %>% filter(CrimeType == "Shooting"),
currentyear = curr.year,
title = "Historical Counts for Shootings")
overviewPlot(control = controllimits %>% filter(Crime == "Robbery"),
spcObj = robSPC,
dat = histdata %>% filter(CrimeType == "Robbery"),
currentyear = curr.year,
title = "Historical Counts for Robbery")
overviewPlot(control = controllimits %>% filter(Crime == "Aggravated Assault"),
spcObj = asltSPC,
dat = histdata %>% filter(CrimeType == "Aggravated Assault"),
currentyear = curr.year,
title = "Historical Counts for Agg Assault")
overviewPlot(control = controllimits %>% filter(Crime == "Burglary"),
spcObj = burgSPC,
dat = histdata %>% filter(CrimeType == "Burglary"),
currentyear = curr.year,
title = "Historical Counts for Burglary")
overviewPlot(control = controllimits %>% filter(Crime == "Larceny"),
spcObj = larcSPC,
dat = histdata %>% filter(CrimeType == "Larceny"),
currentyear = curr.year,
title = "Historical Counts for Larceny")
overviewPlot(control = controllimits %>% filter(Crime == "Homicide"),
spcObj = homicideSPC,
dat = histdata %>% filter(CrimeType == "Homicide"),
currentyear = curr.year,
title = "Historical Counts for Homicide")
overviewPlot(control = controllimits %>% filter(Crime == "Rape"),
spcObj = rapeSPC,
dat = histdata %>% filter(CrimeType == "Rape"),
currentyear = curr.year,
title = "Historical Counts for Rape")
par(mar=c(0,0,0,0))
plot(c(0, 1000), c(0, 20), type = 'n', xlab = '', ylab = '', xaxt = 'n', yaxt ='n', bty = 'n')
rect(0, 0, 1000, 20, col = 'white', border = 'darkgrey', lwd = 1)
text(x = 500, y = 10, labels = "Firearm Crime", cex = 2, col = 'black')
firearmSPC[[1]]
df$WeaponIBRValue <- as.numeric(df$WeaponIBRValue)
mat <- aoristicDayWeek(filter(df, WeaponIBRValue < 11))
plotlyhmap(mat)
guns <- dplyr::filter(df, Firearm == "Firearm")
map <- hotspotMap(sectionmap,
dplyr::filter(guns, Lat != -361))
map
map
guns28 <- guns %>%
filter(Lat != -361 & SevenDaysGroup > curr.week - 4)
if(nrow(guns28) > 0){
map <- hotspotMap(sectionmap, guns28)
map
}
map
dat <- df %>%
filter(Firearm == "Firearm")
x <- nestedbeattable(dat)
x <- x[substr(x$Beat, 3, 3) == section, c("Beat", "count")] #filtering out non-relevant rows
DT::datatable(x %>% mutate(Beat = factor(Beat)),
rownames = FALSE,
colnames = c('Beat', 'Count'),
options = list(dom = 'tf',
pageLength = 100,
columnDefs = list(list(className = 'dt-right', targets = 0:1))))
DT::datatable(guntablenest(df),
rownames = FALSE,
colnames = c("Crime Type", "Description", "Counts"),
options = list(pageLength = 100,
dom = 'tf',
ordering = FALSE,
columnDefs = list(list(className = 'dt-right', targets = 0:2))))
DT::datatable(CPWs[, c("FullAddress", "Beat", "OccurFromDate", "Description")],
filter = 'top',
rownames = FALSE,
colnames = c('Address', 'Beat', 'Date', 'Description'),
options = list(pageLength = 100,
dom = 'tf',
columnDefs = list(list(className = 'dt-right', targets = 0:3))))
par(mar=c(0,0,0,0))
plot(c(0, 1000), c(0, 20), type = 'n', xlab = '', ylab = '', xaxt = 'n', yaxt ='n', bty = 'n')
rect(0, 0, 1000, 20, col = 'white', border = 'darkgrey', lwd = 1)
text(x = 500, y = 10, labels = "Shooting Victims", cex = 2, col = 'black')
svSPC[[1]]
if(nrow(svjoined) > 0){
mat <- aoristicDayWeek(svjoined)
plotlyhmap(mat)
}
if(nrow(svjoined) > 0){
dohotspot <- ifelse(nrow(svjoined) > 10, yes = TRUE, no = FALSE)
map <- hotspotMapSV(basemap = sectionmap,
mapdf = svjoined,
doHotSpot = dohotspot)
map
}
svjoin28 <- dplyr::filter(svjoined,
SevenDaysGroup >= curr.week - 3)
if(nrow(svjoin28) > 0){
dohotspot <- ifelse(nrow(svjoin28) > 10, yes = TRUE, no = FALSE)
map <- hotspotMapSV(basemap = sectionmap,
mapdf = svjoin28,
doHotSpot = dohotspot)
map
}
if(nrow(svjoined) > 0){
x <- nestedbeattable(svjoined)
x <- x[substr(x$Beat, 3, 3) == section, c("Beat", "count")]
#filtering out non-relevant rows
DT::datatable(x %>% mutate(Beat = factor(Beat)),
rownames = FALSE,
colnames = c("Beat", "Count"),
options = list(pageLength = 100,
dom = 'tf',
columnDefs = list(list(className = 'dt-right', targets = 0:1)))
)
}
if(nrow(svjoined) > 0){
temptab <- svjoined %>% count(CaseNumber)
temptab$n <- factor(temptab$n, levels = 1:max(temptab$n))
temptab$n %>%
table() %>%
as.data.frame() %>%
arrange(.) %>%
DT::datatable(filter = 'top',
rownames = FALSE,
colnames = c("Victims per Incident", "Count"),
options = list(pageLength = 100,
dom = 'tf',
ordering = FALSE,
columnDefs = list(list(className = 'dt-right', targets = 0:1))))
}
par(mar=c(0,0,0,0))
plot(c(0, 1000), c(0, 20), type = 'n', xlab = '', ylab = '', xaxt = 'n', yaxt ='n', bty = 'n')
rect(0, 0, 1000, 20, col = 'white', border = 'darkgrey', lwd = 1)
text(x = 500, y = 10, labels = "Robbery", cex = 2, col = 'black')
start <- Sys.time()
## Data prep
#source("Z:/Projects/dashboard/RPDCrimeDashboard/CrimeDashboardRepo/CrimeDashboardWeeklyDataPrep.R")
## Citywide dashboards
rmarkdown::render("Z:/Projects/dashboard/RPDCrimeDashboard/CrimeDashboardRepo/CallsForServiceCitywide.RMD",
output_dir = "//cor.local/RPD/Chief/OBI/Projects/dashboard/RPDCrimeDashboard",
quiet = TRUE)
start <- Sys.time()
## Data prep
#source("Z:/Projects/dashboard/RPDCrimeDashboard/CrimeDashboardRepo/CrimeDashboardWeeklyDataPrep.R")
## Citywide dashboards
rmarkdown::render("Z:/Projects/dashboard/RPDCrimeDashboard/CrimeDashboardRepo/CallsForServiceCitywide.RMD",
output_dir = "//cor.local/RPD/Chief/OBI/Projects/dashboard/RPDCrimeDashboard",
quiet = TRUE)
start <- Sys.time()
## Data prep
#source("Z:/Projects/dashboard/RPDCrimeDashboard/CrimeDashboardRepo/CrimeDashboardWeeklyDataPrep.R")
## Citywide dashboards
rmarkdown::render("Z:/Projects/dashboard/RPDCrimeDashboard/CrimeDashboardRepo/CallsForServiceCitywide.RMD",
output_dir = "//cor.local/RPD/Chief/OBI/Projects/dashboard/RPDCrimeDashboard",
quiet = TRUE)
start <- Sys.time()
## Data prep
#source("Z:/Projects/dashboard/RPDCrimeDashboard/CrimeDashboardRepo/CrimeDashboardWeeklyDataPrep.R")
## Citywide dashboards
rmarkdown::render("Z:/Projects/dashboard/RPDCrimeDashboard/CrimeDashboardRepo/CallsForServiceCitywide.RMD",
output_dir = "//cor.local/RPD/Chief/OBI/Projects/dashboard/RPDCrimeDashboard",
quiet = TRUE)
getOption("bitmapType")
png(tempfile(), type = "cairo")
dev.off()
dev.off()
grDevices:::.onLoad()
