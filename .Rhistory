"1099 Jay St, Rochester, NY, 14611")
sectionSPC <- readRDS("Z:/Projects/dashboard/RPDCrimeDashboard/Objects/sectionSPClist.RDS")[params$sectionname][[1]]
firearmSPC <- sectionSPC$Firearm
svSPC <- sectionSPC$SV
homicideSPC <- sectionSPC$Homicide
rapeSPC <- sectionSPC$Rape
robSPC <- sectionSPC$Rob
asltSPC <- sectionSPC$Aslt
burgSPC <- sectionSPC$Burg
larcSPC <- sectionSPC$Larc
odbcCloseAll()
#Check to make sure this year's firearm homicides are in the firearm data
if(nrow(MCUhoms) > 0){
MCUhoms$CaseNumber <- paste0("20",
substr(MCUhoms$CaseNumber, 1, 3),
"00",
substr(MCUhoms$CaseNumber, 4, 9))
}
firearmhoms <- MCUhoms %>%
filter(YearofEvent == curr.year, WeaponType == "Firearm")
# if(any(! firearmhoms$CaseNumber %in% filter(df, Firearm == "Firearm"))){
#     cat("There are firearm homicides that do not appear in the firearm data due to LERMS issues.")
# }
tab <- data.frame(CrimeTypes = c("Firearm crime", "Shootings", "Robbery",
"Aggravated Assault", "Burglary", "Larceny"),
Counts = c(firearmSPC[[4]], svSPC[[4]], robSPC[[4]],
asltSPC[[4]], burgSPC[[4]], larcSPC[[4]]),
RiskOfRed = c(firearmSPC[[2]], svSPC[[2]], robSPC[[2]],
asltSPC[[2]], burgSPC[[2]], larcSPC[[2]]),
ChanceOfGreen = c(firearmSPC[[3]], svSPC[[3]], robSPC[[3]],
asltSPC[[3]], burgSPC[[3]], larcSPC[[3]]))
#knitr::kable(tab, col.names = c("Crime Types",
#                                "YTD Totals",
#                                "% chance of exceeding upper action limit",
#                                "% chance of beating lower action limit"))
DT::datatable(tab,
rownames = FALSE,
colnames = c("Crime Types",
"YTD Totals",
"% chance of exceeding upper action limit",
"% chance of beating lower action limit"),
options = list(dom = 'tf',
columnDefs = list(list(className = 'dt-right', targets = 0:3))))
CrimeTypes <- c("Aggravated Assault", "Burglary", "Homicide", "Larceny",
"MV Theft", "Rape", "Robbery", "Dangerous Weapons")
treedata <- df %>%
filter(CrimeType %in% CrimeTypes) %>%
filter(SevenDaysGroup %in% 1:curr.week) %>%
count(CrimeType = CrimeType,
Clearance = ClearanceStatusValue,
Closure = CaseStatusValue) %>%
ungroup() %>%
group_by(CrimeType) %>%
mutate(CrimeTypeCount = sum(n)) %>%
group_by(CrimeType, Closure) %>%
mutate(ClosureCount = sum(n)) %>%
ungroup() %>%
mutate(CrimeType = paste0(CrimeType, " (",
CrimeTypeCount, ", ",
round(100 * CrimeTypeCount / sum(n), 2),
"%)  "),
Closure = paste0(Closure, " (",
ClosureCount, ", ",
round(100 * ClosureCount / CrimeTypeCount, 2),
"%)  "),
Clearance = paste0(Clearance, " (",
n, ", ",
round(100 * n / ClosureCount, 2),
"%)"))
pdf(NULL)
clearanceTreeMap <- d3tree2(
treemap(
treedata,
index = c("CrimeType", "Closure", "Clearance"),
vSize = "n",
draw = FALSE),
rootname = "Total"
)
clearanceTreeMap
firearmcontrol <- filter(controllimits, Crime == "Firearm")
SimsAvg <- mean(firearmSPC[[5]]$Value)
overviewPlot(control = controllimits %>% filter(Crime == "Firearm"),
spcObj = firearmSPC,
dat = histdata %>% filter(CrimeType == "Firearm"),
currentyear = curr.year,
title = "Historical Counts for Firearm Crime")
overviewPlot(control = ShootingControlLimits,
spcObj = svSPC,
dat = histdata %>% filter(CrimeType == "Shooting"),
currentyear = curr.year,
title = "Historical Counts for Shootings")
overviewPlot(control = controllimits %>% filter(Crime == "Robbery"),
spcObj = robSPC,
dat = histdata %>% filter(CrimeType == "Robbery"),
currentyear = curr.year,
title = "Historical Counts for Robbery")
overviewPlot(control = controllimits %>% filter(Crime == "Aggravated Assault"),
spcObj = asltSPC,
dat = histdata %>% filter(CrimeType == "Aggravated Assault"),
currentyear = curr.year,
title = "Historical Counts for Agg Assault")
overviewPlot(control = controllimits %>% filter(Crime == "Burglary"),
spcObj = burgSPC,
dat = histdata %>% filter(CrimeType == "Burglary"),
currentyear = curr.year,
title = "Historical Counts for Burglary")
overviewPlot(control = controllimits %>% filter(Crime == "Larceny"),
spcObj = larcSPC,
dat = histdata %>% filter(CrimeType == "Larceny"),
currentyear = curr.year,
title = "Historical Counts for Larceny")
overviewPlot(control = controllimits %>% filter(Crime == "Homicide"),
spcObj = homicideSPC,
dat = histdata %>% filter(CrimeType == "Homicide"),
currentyear = curr.year,
title = "Historical Counts for Homicide")
overviewPlot(control = controllimits %>% filter(Crime == "Rape"),
spcObj = rapeSPC,
dat = histdata %>% filter(CrimeType == "Rape"),
currentyear = curr.year,
title = "Historical Counts for Rape")
par(mar=c(0,0,0,0))
plot(c(0, 1000), c(0, 20), type = 'n', xlab = '', ylab = '', xaxt = 'n', yaxt ='n', bty = 'n')
rect(0, 0, 1000, 20, col = 'white', border = 'darkgrey', lwd = 1)
text(x = 500, y = 10, labels = "Firearm Crime", cex = 2, col = 'black')
firearmSPC[[1]]
df$WeaponIBRValue <- as.numeric(df$WeaponIBRValue)
mat <- aoristicDayWeek(filter(df, WeaponIBRValue < 11))
plotlyhmap(mat)
guns <- dplyr::filter(df, Firearm == "Firearm")
map <- hotspotMap(sectionmap,
dplyr::filter(guns, Lat != -361))
map
map
guns28 <- guns %>%
filter(Lat != -361 & SevenDaysGroup > curr.week - 4)
if(nrow(guns28) > 0){
map <- hotspotMap(sectionmap, guns28)
map
}
map
dat <- df %>%
filter(Firearm == "Firearm")
x <- nestedbeattable(dat)
x <- x[substr(x$Beat, 3, 3) == section, c("Beat", "count")] #filtering out non-relevant rows
DT::datatable(x %>% mutate(Beat = factor(Beat)),
rownames = FALSE,
colnames = c('Beat', 'Count'),
options = list(dom = 'tf',
pageLength = 100,
columnDefs = list(list(className = 'dt-right', targets = 0:1))))
DT::datatable(guntablenest(df),
rownames = FALSE,
colnames = c("Crime Type", "Description", "Counts"),
options = list(pageLength = 100,
dom = 'tf',
ordering = FALSE,
columnDefs = list(list(className = 'dt-right', targets = 0:2))))
DT::datatable(CPWs[, c("FullAddress", "Beat", "OccurFromDate", "Description")],
filter = 'top',
rownames = FALSE,
colnames = c('Address', 'Beat', 'Date', 'Description'),
options = list(pageLength = 100,
dom = 'tf',
columnDefs = list(list(className = 'dt-right', targets = 0:3))))
par(mar=c(0,0,0,0))
plot(c(0, 1000), c(0, 20), type = 'n', xlab = '', ylab = '', xaxt = 'n', yaxt ='n', bty = 'n')
rect(0, 0, 1000, 20, col = 'white', border = 'darkgrey', lwd = 1)
text(x = 500, y = 10, labels = "Shooting Victims", cex = 2, col = 'black')
svSPC[[1]]
if(nrow(svjoined) > 0){
mat <- aoristicDayWeek(svjoined)
plotlyhmap(mat)
}
if(nrow(svjoined) > 0){
dohotspot <- ifelse(nrow(svjoined) > 10, yes = TRUE, no = FALSE)
map <- hotspotMapSV(basemap = sectionmap,
mapdf = svjoined,
doHotSpot = dohotspot)
map
}
svjoin28 <- dplyr::filter(svjoined,
SevenDaysGroup >= curr.week - 3)
if(nrow(svjoin28) > 0){
dohotspot <- ifelse(nrow(svjoin28) > 10, yes = TRUE, no = FALSE)
map <- hotspotMapSV(basemap = sectionmap,
mapdf = svjoin28,
doHotSpot = dohotspot)
map
}
if(nrow(svjoined) > 0){
x <- nestedbeattable(svjoined)
x <- x[substr(x$Beat, 3, 3) == section, c("Beat", "count")]
#filtering out non-relevant rows
DT::datatable(x %>% mutate(Beat = factor(Beat)),
rownames = FALSE,
colnames = c("Beat", "Count"),
options = list(pageLength = 100,
dom = 'tf',
columnDefs = list(list(className = 'dt-right', targets = 0:1)))
)
}
if(nrow(svjoined) > 0){
temptab <- svjoined %>% count(CaseNumber)
temptab$n <- factor(temptab$n, levels = 1:max(temptab$n))
temptab$n %>%
table() %>%
as.data.frame() %>%
arrange(.) %>%
DT::datatable(filter = 'top',
rownames = FALSE,
colnames = c("Victims per Incident", "Count"),
options = list(pageLength = 100,
dom = 'tf',
ordering = FALSE,
columnDefs = list(list(className = 'dt-right', targets = 0:1))))
}
par(mar=c(0,0,0,0))
plot(c(0, 1000), c(0, 20), type = 'n', xlab = '', ylab = '', xaxt = 'n', yaxt ='n', bty = 'n')
rect(0, 0, 1000, 20, col = 'white', border = 'darkgrey', lwd = 1)
text(x = 500, y = 10, labels = "Robbery", cex = 2, col = 'black')
start <- Sys.time()
## Data prep
#source("Z:/Projects/dashboard/RPDCrimeDashboard/CrimeDashboardRepo/CrimeDashboardWeeklyDataPrep.R")
## Citywide dashboards
rmarkdown::render("Z:/Projects/dashboard/RPDCrimeDashboard/CrimeDashboardRepo/CallsForServiceCitywide.RMD",
output_dir = "//cor.local/RPD/Chief/OBI/Projects/dashboard/RPDCrimeDashboard",
quiet = TRUE)
start <- Sys.time()
## Data prep
#source("Z:/Projects/dashboard/RPDCrimeDashboard/CrimeDashboardRepo/CrimeDashboardWeeklyDataPrep.R")
## Citywide dashboards
rmarkdown::render("Z:/Projects/dashboard/RPDCrimeDashboard/CrimeDashboardRepo/CallsForServiceCitywide.RMD",
output_dir = "//cor.local/RPD/Chief/OBI/Projects/dashboard/RPDCrimeDashboard",
quiet = TRUE)
start <- Sys.time()
## Data prep
#source("Z:/Projects/dashboard/RPDCrimeDashboard/CrimeDashboardRepo/CrimeDashboardWeeklyDataPrep.R")
## Citywide dashboards
rmarkdown::render("Z:/Projects/dashboard/RPDCrimeDashboard/CrimeDashboardRepo/CallsForServiceCitywide.RMD",
output_dir = "//cor.local/RPD/Chief/OBI/Projects/dashboard/RPDCrimeDashboard",
quiet = TRUE)
start <- Sys.time()
## Data prep
#source("Z:/Projects/dashboard/RPDCrimeDashboard/CrimeDashboardRepo/CrimeDashboardWeeklyDataPrep.R")
## Citywide dashboards
rmarkdown::render("Z:/Projects/dashboard/RPDCrimeDashboard/CrimeDashboardRepo/CallsForServiceCitywide.RMD",
output_dir = "//cor.local/RPD/Chief/OBI/Projects/dashboard/RPDCrimeDashboard",
quiet = TRUE)
getOption("bitmapType")
png(tempfile(), type = "cairo")
dev.off()
dev.off()
grDevices:::.onLoad()
curr.year <- as.numeric(format(Sys.Date(), '%Y')) ### This current year to automatically reference the current year
begindate <- paste0(curr.year, '-01-01') ### For CFS to automatically create the begindate based on current year
library(knitr)
library(flexdashboard)
library(plotly)
library(tidyverse)
library(jsonlite)
library(treemap)
#library(d3treeR)
library(leaflet)
opts_chunk$set(echo = FALSE)
source("Z:/Projects/dashboard/RPDCrimeDashboard/Functions/LERMS_getCallsForService.R")
source("Z:/Projects/dashboard/RPDCrimeDashboard/Functions/CFSloc.R")
source("Z:/Projects/dashboard/RPDCrimeDashboard/Functions/aoristicDayWeek.R")
source("Z:/Projects/dashboard/RPDCrimeDashboard/Functions/cfsHotspotMap2.R") # parallelize
#source("Z:/Projects/dashboard/RPDCrimeDashboard/Functions/cfsHotspotMap.R")
source("Z:/Projects/dashboard/RPDCrimeDashboard/Functions/plotlyhmap.R")
source("Z:/Projects/dashboard/RPDCrimeDashboard/Functions/nestedbeattable.R")
#sevenDayGroupTable is a lookup table to get the current week (Group) from the date
#Because it uses length(Date) from seq.Date, it should work even in leap years
sevenDayGroupTable <- data.frame(Date = seq.Date(from = as.Date(begindate),
to = as.Date(paste0(curr.year, "-12-31")),
by = 1)) %>%
mutate(DOY = 1:length(Date),
Group = c(rep(1:51, each = 7),
rep(52, times = length(Date) - 357)))
curr.week <- sevenDayGroupTable$Group[match(as.numeric(format(Sys.Date(),
'%j')),
sevenDayGroupTable$DOY)] - 1
sectionmap <- readRDS("Z:/Projects/dashboard/RPDCrimeDashboard/Objects/sectionmaplist.RDS")[params$sectionname][[1]]
loc <- CFSloc()
exclude <- c("630 North Clinton Ave, Rochester, NY, 14605",
"185 Exchange Blvd, Rochester, NY, 14614",
"1099 Jay St, Rochester, NY, 14611")
cfs.df <- readRDS(file = "Z:/Projects/dashboard/RPDCrimeDashboard/Objects/sectioncfslist.RDS")[params$sectionname][[1]]
foo <- cfs.df %>%
rename(GEOBeat = IncidentBeat) %>%
filter(discretionary == FALSE)
#create a df of beats, counts per beat,
#section associated with beat, and count associated with section
beatNames <- readRDS(file = "Z:/Projects/dashboard/RPDCrimeDashboard/Objects/beatNames.RDS")
tab <- foo %>%
mutate(GEOBeat = factor(GEOBeat, levels = beatNames$GEOBeat)) %>%
group_by(GEOBeat) %>%
summarise(count = n()) %>%
arrange(GEOBeat) %>%
tidyr::complete(GEOBeat, fill = list(count = 0)) %>%
mutate(count = replace(count, is.na(count), 0),
section = substr(GEOBeat, 3, 3)) %>%
mutate(section = replace(section, section == 1, "Lake")) %>%
mutate(section = replace(section, section == 3, "Genesee")) %>%
mutate(section = replace(section, section == 5, "Goodman")) %>%
mutate(section = replace(section, section == 7, "Clinton")) %>%
mutate(section = replace(section, section == 9, "Central")) %>%
group_by(section) %>%
mutate(SectionSum = sum(count)) %>%
ungroup() %>%
#filter(section %in% unique(foo$sec)) %>% # to filter out the rubbish
dplyr::select(section, GEOBeat, count, SectionSum) %>%
filter(! GEOBeat == "***")
newdf <- data.frame(section = NA,
GEOBeat = NA,
count = NA,
SectionSum = NA)
for(i in unique(tab$section)){
temp <- filter(tab, section == i)
newdf <- rbind(newdf,
c(i, NA, NA, mean(tab$SectionSum[tab$section == i],
na.rm = TRUE)),
temp)
}
newdf <- newdf[-1, ]
newdf[is.na(newdf)] <- ""
newdf$SectionSum <- ifelse(newdf$count != "", "", newdf$SectionSum)
newdf$section <- ifelse(newdf$GEOBeat != "", "", newdf$section)
newdf$count <- ifelse(newdf$count == "", newdf$SectionSum, newdf$count)
newdf <- rename(newdf, Beat = GEOBeat)
row.names(newdf) <- NULL
newdf[, 1:3]
kable(nestedbeattable(dat)[-1, -1],
col.names = c("Beat", "Count"),
row.names = FALSE)
dat = newdf[, 1:3]
kable(nestedbeattable(dat)[-1, -1],
col.names = c("Beat", "Count"),
row.names = FALSE)
kable(dat,
col.names = c("Beat", "Count"),
row.names = FALSE)
dat <- cfs.df %>%
rename(GEOBeat = IncidentBeat) %>%
filter(discretionary == FALSE)
kable(nestedbeattable(dat)[-1, -1],
col.names = c("Beat", "Count"),
row.names = FALSE)
kable(nestedbeattable(dat)[-1, -1] %>%
dplyr::filter(count != 0),
col.names = c("Beat", "Count"),
row.names = FALSE)
dat <- cfs.df %>%
rename(GEOBeat = IncidentBeat) %>%
filter(discretionary == FALSE)
kable(nestedbeattable(dat)[-1, -1] %>%
dplyr::filter(count != 0),
col.names = c("Beat", "Count"),
row.names = FALSE)
dat
kable(nestedbeattable(dat)[-1, -1])
kable(nestedbeattable(dat)[-1, -1],
col.names = c("Beat", "Count"),
row.names = FALSE)
curr.year <- as.numeric(format(Sys.Date(), '%Y')) ### This current year to automatically reference the current year
begindate <- paste0(curr.year, '-01-01') ### For CFS to automatically create the begindate based on current year
library(knitr)
library(flexdashboard)
library(plotly)
library(tidyverse)
library(jsonlite)
library(treemap)
#library(d3treeR)
library(leaflet)
opts_chunk$set(echo = FALSE)
source("Z:/Projects/dashboard/RPDCrimeDashboard/Functions/LERMS_getCallsForService.R")
source("Z:/Projects/dashboard/RPDCrimeDashboard/Functions/CFSloc.R")
source("Z:/Projects/dashboard/RPDCrimeDashboard/Functions/aoristicDayWeek.R")
source("Z:/Projects/dashboard/RPDCrimeDashboard/Functions/cfsHotspotMap2.R") # parallelize
#source("Z:/Projects/dashboard/RPDCrimeDashboard/Functions/cfsHotspotMap.R")
source("Z:/Projects/dashboard/RPDCrimeDashboard/Functions/plotlyhmap.R")
source("Z:/Projects/dashboard/RPDCrimeDashboard/Functions/nestedbeattable.R")
#sevenDayGroupTable is a lookup table to get the current week (Group) from the date
#Because it uses length(Date) from seq.Date, it should work even in leap years
sevenDayGroupTable <- data.frame(Date = seq.Date(from = as.Date(begindate),
to = as.Date(paste0(curr.year, "-12-31")),
by = 1)) %>%
mutate(DOY = 1:length(Date),
Group = c(rep(1:51, each = 7),
rep(52, times = length(Date) - 357)))
curr.week <- sevenDayGroupTable$Group[match(as.numeric(format(Sys.Date(),
'%j')),
sevenDayGroupTable$DOY)] - 1
sectionmap <- readRDS("Z:/Projects/dashboard/RPDCrimeDashboard/Objects/sectionmaplist.RDS")[params$sectionname][[1]]
loc <- CFSloc()
exclude <- c("630 North Clinton Ave, Rochester, NY, 14605",
"185 Exchange Blvd, Rochester, NY, 14614",
"1099 Jay St, Rochester, NY, 14611")
cfs.df <- readRDS(file = "Z:/Projects/dashboard/RPDCrimeDashboard/Objects/sectioncfslist.RDS")[params$sectionname][[1]]
dat <- cfs.df %>%
rename(GEOBeat = IncidentBeat) %>%
filter(discretionary == FALSE)
kable(nestedbeattable(dat)[-1, -1] %>%
dplyr::filter(count != 0),
col.names = c("Beat", "Count"),
row.names = FALSE)
asdf <- nestedbeattable(dat)
asdf
asdf[-1. -1]
str(asdf)
glimpse(asdf)
glimpse(asdf[-1,-1])
glimpse(asdf[,-1])
glimpse(asdf[,-1]) %>% filter(count != 0)
glimpse(asdf[,-1]) %>% filter(count != "0")
dat <- cfs.df %>%
rename(GEOBeat = IncidentBeat) %>%
filter(discretionary == FALSE)
kable(nestedbeattable(dat)[, -1] %>%
dplyr::filter(count != 0),
col.names = c("Beat", "Count"),
row.names = FALSE)
dat <- cfs.df %>%
rename(GEOBeat = IncidentBeat) %>%
filter(discretionary == TRUE)
kable(nestedbeattable(dat)[, -1] %>%
dplyr::filter(count != 0),
col.names = c("Beat", "Count"),
row.names = FALSE)
nestedbeattable(dat)[, -1]$Beat
kable(nestedbeattable(dat)[, -1] %>%
dplyr::filter(count != 0) %>%
mutate(Beat = case_when(Beat == "" ~ params$sectionname,
TRUE ~ Beat)),
col.names = c("Beat", "Count"),
row.names = FALSE)
kable(nestedbeattable(dat)[, -1] %>%
dplyr::filter(count != 0) %>%
mutate(Beat = case_when(Beat == "" ~ paste0(params$sectionname, " total"),
TRUE ~ Beat)),
col.names = c("Beat", "Count"),
row.names = FALSE)
start <- Sys.time()
## Data prep
source("Z:/Projects/dashboard/RPDCrimeDashboard/CrimeDashboardRepo/CrimeDashboardWeeklyDataPrep.R")
## Citywide dashboards
rmarkdown::render("Z:/Projects/dashboard/RPDCrimeDashboard/CrimeDashboardRepo/CallsForServiceCitywide.RMD",
output_dir = "//cor.local/RPD/Chief/OBI/Projects/dashboard/RPDCrimeDashboard",
quiet = TRUE)
rmarkdown::render("Z:/Projects/dashboard/RPDCrimeDashboard/CrimeDashboardRepo/CrimesCitywide.RMD",
output_dir = "//cor.local/RPD/Chief/OBI/Projects/dashboard/RPDCrimeDashboard",
quiet = TRUE)
## Section crime dashboards
rmarkdown::render("Z:/Projects/dashboard/RPDCrimeDashboard/CrimeDashboardRepo/CrimesSection.RMD",
params = list(sectionname = "Lake"),
output_dir = "//cor.local/RPD/Chief/OBI/Projects/dashboard/RPDCrimeDashboard",
output_file = "LakeCrimeDashboard.html",
quiet = TRUE)
rmarkdown::render("Z:/Projects/dashboard/RPDCrimeDashboard/CrimeDashboardRepo/CrimesSection.RMD",
params = list(sectionname = "Genesee"),
output_dir = "//cor.local/RPD/Chief/OBI/Projects/dashboard/RPDCrimeDashboard",
output_file = "GeneseeCrimeDashboard.html",
quiet = TRUE)
rmarkdown::render("Z:/Projects/dashboard/RPDCrimeDashboard/CrimeDashboardRepo/CrimesSection.RMD",
params = list(sectionname = "Goodman"),
output_dir = "//cor.local/RPD/Chief/OBI/Projects/dashboard/RPDCrimeDashboard",
output_file = "GoodmanCrimeDashboard.html",
quiet = TRUE)
rmarkdown::render("Z:/Projects/dashboard/RPDCrimeDashboard/CrimeDashboardRepo/CrimesSection.RMD",
params = list(sectionname = "Clinton"),
output_dir = "//cor.local/RPD/Chief/OBI/Projects/dashboard/RPDCrimeDashboard",
output_file = "ClintonCrimeDashboard.html",
quiet = TRUE)
rmarkdown::render("Z:/Projects/dashboard/RPDCrimeDashboard/CrimeDashboardRepo/CrimesSection.RMD",
params = list(sectionname = "Central"),
output_dir = "//cor.local/RPD/Chief/OBI/Projects/dashboard/RPDCrimeDashboard",
output_file = "CentralCrimeDashboard.html",
quiet = TRUE)
## Section CFS dashboards
rmarkdown::render("Z:/Projects/dashboard/RPDCrimeDashboard/CrimeDashboardRepo/CallsForServiceSection.RMD",
params = list(sectionname = "Lake"),
output_dir = "//cor.local/RPD/Chief/OBI/Projects/dashboard/RPDCrimeDashboard",
output_file = "LakeCFSDashboard.html",
quiet = TRUE)
rmarkdown::render("Z:/Projects/dashboard/RPDCrimeDashboard/CrimeDashboardRepo/CallsForServiceSection.RMD",
params = list(sectionname = "Genesee"),
output_dir = "//cor.local/RPD/Chief/OBI/Projects/dashboard/RPDCrimeDashboard",
output_file = "GeneseeCFSDashboard.html",
quiet = TRUE)
rmarkdown::render("Z:/Projects/dashboard/RPDCrimeDashboard/CrimeDashboardRepo/CallsForServiceSection.RMD",
params = list(sectionname = "Goodman"),
output_dir = "//cor.local/RPD/Chief/OBI/Projects/dashboard/RPDCrimeDashboard",
output_file = "GoodmanCFSDashboard.html",
quiet = TRUE)
rmarkdown::render("Z:/Projects/dashboard/RPDCrimeDashboard/CrimeDashboardRepo/CallsForServiceSection.RMD",
params = list(sectionname = "Clinton"),
output_dir = "//cor.local/RPD/Chief/OBI/Projects/dashboard/RPDCrimeDashboard",
output_file = "ClintonCFSDashboard.html",
quiet = TRUE)
rmarkdown::render("Z:/Projects/dashboard/RPDCrimeDashboard/CrimeDashboardRepo/CallsForServiceSection.RMD",
params = list(sectionname = "Central"),
output_dir = "//cor.local/RPD/Chief/OBI/Projects/dashboard/RPDCrimeDashboard",
output_file = "CentralCFSDashboard.html",
quiet = TRUE)
## Patrol section overview
rmarkdown::render("Z:/Projects/dashboard/RPDCrimeDashboard/CrimeDashboardRepo/SectionOverlook.RMD",
output_dir = "//cor.local/RPD/Chief/OBI/Projects/dashboard/RPDCrimeDashboard",
quiet = TRUE)
end <- Sys.time()
took <- difftime(end, start)
took
