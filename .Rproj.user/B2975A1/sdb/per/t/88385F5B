{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Citywide Calls For Service Dashboard, as of `r format(Sys.Date() - 1, '%d %B, %Y')`\"\noutput: \n  flexdashboard::flex_dashboard:\n    logo: Z:/Projects/dashboard/RPDCrimeDashboard/Objects/RPDLogoSMALL.png\n    orientation: column\n    vertical_layout: fill\n    theme: cerulean\n---\n\n```{r setup, include=FALSE}\n\ncurr.year <- as.numeric(format(Sys.Date(), '%Y')) ### This current year to automatically reference the current year\nbegindate <- paste0(curr.year, '-01-01') ### For CFS to automatically create the begindate based on current year\n\nlibrary(knitr)\nlibrary(flexdashboard)\nlibrary(raster)\nlibrary(tidyverse)\nlibrary(jsonlite)\nlibrary(treemap)\nlibrary(leaflet)\nlibrary(plotly)\nlibrary(forcats)\nopts_chunk$set(echo = FALSE)\n\nsource(\"Z:/Projects/dashboard/RPDCrimeDashboard/Functions/LERMS_getCallsForService.R\")\nsource(\"Z:/Projects/dashboard/RPDCrimeDashboard/Functions/CFSloc.R\")\nsource(\"Z:/Projects/dashboard/RPDCrimeDashboard/Functions/aoristicDayWeek.R\")\nsource(\"Z:/Projects/dashboard/RPDCrimeDashboard/Functions/cfsHotspotMap2.R\")\nsource(\"Z:/Projects/dashboard/RPDCrimeDashboard/Functions/plotlyhmap.R\")\nsource(\"Z:/Projects/dashboard/RPDCrimeDashboard/Functions/nestedbeattable.R\")\n\n#sevenDayGroupTable is a lookup table to get the current week (Group) from the date\n#Because it uses length(Date) from seq.Date, it should work even in leap years\n\nsevenDayGroupTable <- data.frame(Date = seq.Date(from = as.Date(begindate),\n                                                 to = as.Date(paste0(curr.year, \"-12-31\")),\n                                                 by = 1)) %>%\n    mutate(DOY = 1:length(Date),\n           Group = c(rep(1:51, each = 7), \n                     rep(52, times = length(Date) - 357)))\n\ncurr.week <- sevenDayGroupTable$Group[match(as.numeric(format(Sys.Date(), \n                                                             '%j')), \n                                           sevenDayGroupTable$DOY)] - 1\n\n# Read in city map\ncitymap <- readRDS(file = \"Z:/Projects/dashboard/RPDCrimeDashboard/Objects/citymap.RDS\")\n\nloc <- CFSloc()\nexclude <- c(\"630 North Clinton Ave, Rochester, NY, 14605\", \n             \"185 Exchange Blvd, Rochester, NY, 14614\",\n             \"1099 Jay St, Rochester, NY, 14611\")\n\ncfs.df <- readRDS(file = \"Z:/Projects/dashboard/RPDCrimeDashboard/Objects/citywidecfs.RDS\")\n\n```\n\n\nNon-discretionary CFS\n======================================================================\n\nColumn {data-width=500}\n-----------------------------------------------------------------------\n\n```{r nondisTitle, fig.align='center', fig.height=1}\npar(mar=c(0,0,0,0))\nplot(c(0, 1000), c(0, 20), type = 'n', xlab = '', ylab = '', xaxt = 'n', yaxt ='n', bty = 'n')\nrect(0, 0, 1000, 20, col = 'white', border = 'darkgrey', lwd = 1)\ntext(x = 500, y = 10, labels = \"Non-discretionary calls for service\", cex = 2, col = 'black')\n```\n\n### Wait time (RPD arrival time) since `r begindate`\n\n```{r nondisWaittime}\nwaittime <- cfs.df %>% \n    filter(discretionary == FALSE & \n               RPD_Anscombe_Trans == 1) %>%\n    group_by(CallTypeCode, RPD_Priority) %>% \n    summarise(MedianWaitTime = median(RPD_Response_Time),\n              Count = n()) %>%\n    arrange(desc(Count)) %>%\n    mutate(Prop = Count / sum(Count)) %>%\n    filter(Prop > .01)\n    \nXaxis <- list(\n    zeroline = FALSE,\n    showline = FALSE,\n    showticklabels = FALSE,\n    showgrid = TRUE)\nYaxis <- list(\n    zeroline = FALSE,\n    showline = FALSE,\n    showticklabels = TRUE,\n    showgrid = TRUE)\n\ncrit <- plot_ly(\n    type = \"scatter\",\n    mode = \"markers\",\n    data = waittime %>% filter(RPD_Priority == \"Critical\"),\n    x = ~CallTypeCode,\n    y = ~MedianWaitTime,\n    size = ~Count,\n    name = \"Critcal Calls\",\n    showlegend = FALSE,\n    hovertext = ~paste0(\n        \"CallTypeCode: \", CallTypeCode, \"<br>\",\n        \"MedianWaitTime: \", MedianWaitTime, \"<br>\",\n        \"Count: \", Count),\n    hoverinfo = \"text\"\n    ) %>%\n    layout(xaxis = Xaxis, \n           yaxis = Yaxis)\nurg <- plot_ly(\n    type = \"scatter\",\n    mode = \"markers\",\n    data = waittime %>% filter(RPD_Priority == \"Urgent\"),\n    x = ~CallTypeCode,\n    y = ~MedianWaitTime,\n    size = ~Count,\n    name = \"Urgent Calls\",\n    showlegend = FALSE,\n    hovertext = ~paste0(\n        \"CallTypeCode: \", CallTypeCode, \"<br>\",\n        \"MedianWaitTime: \", MedianWaitTime, \"<br>\",\n        \"Count: \", Count),\n    hoverinfo = \"text\"\n    ) %>%\n    layout(xaxis = Xaxis, \n           yaxis = Yaxis)\nnorm <- plot_ly(\n    type = \"scatter\",\n    mode = \"markers\",\n    data = waittime %>% filter(RPD_Priority == \"Normal\"),\n    x = ~CallTypeCode,\n    y = ~MedianWaitTime,\n    size = ~Count,\n    name = \"Normal Calls\",\n    showlegend = FALSE,\n    hovertext = ~paste0(\n        \"CallTypeCode: \", CallTypeCode, \"<br>\",\n        \"MedianWaitTime: \", MedianWaitTime, \"<br>\",\n        \"Count: \", Count),\n    hoverinfo = \"text\"\n    ) %>%\n    layout(xaxis = Xaxis, \n           yaxis = Yaxis)\n\nsubbie <- subplot(crit, urg, norm, shareY = TRUE, titleY = TRUE) %>%\n    layout(title = \"CFS wait time distribution (non-discretionary calls only)\") %>%\n    add_annotations(\n        x = .1, y = .95, xref = \"paper\", yref = \"paper\", xanchor = \"left\", yanchor = \"top\",\n        text = \"Critical\", showarrow = FALSE) %>%\n    add_annotations(\n        x = .5, y = .95, xref = \"paper\", yref = \"paper\", xanchor = \"center\", yanchor = \"top\",\n        text = \"Urgent\", showarrow = FALSE) %>%\n    add_annotations(\n        x = .9, y = .95, xref = \"paper\", yref = \"paper\", xanchor = \"right\", yanchor = \"top\",\n        text = \"Normal\", showarrow = FALSE)\n\nsubbie\n\n```\n\n### Aoristic heatmap\n\n```{r nondisAoristic}\n\nmat <- aoristicDayWeek(filter(cfs.df, discretionary == FALSE & RPD_Anscombe_Trans == 1))\n#hmap <- d3heatmap(mat, Rowv = FALSE, Colv = FALSE, colors = brewer.pal(name = \"Reds\", n = 9))\nplotlyhmap(mat)\n\n```\n\nColumn {data-width=500 .tabset .tabset-fade}\n-----------------------------------------------------------------------\n\n### YTD Hotspot map\n\n```{r nondisYTDmap}\n\nmap <- cfs.df %>% \n    dplyr::filter(discretionary == FALSE & ! GEOCodedLocation %in% exclude) %>%\n    left_join(y = loc, by = \"GEOCodedLocation\") %>%\n    filter(! is.na(Lng)) %>%\n    cfsHotspotMap2(markers = FALSE, map = citymap)\n\nmap\n```\n\n### 28 day Hotspot map\n\n```{r nondis28daymap}\n\nmap <- cfs.df %>% \n    dplyr::filter(discretionary == FALSE & ! GEOCodedLocation %in% exclude) %>%\n    filter(SevenDaysGroup >= curr.week - 3) %>%\n    left_join(y = loc, by = \"GEOCodedLocation\") %>%\n    filter(! is.na(Lng)) %>%\n    cfsHotspotMap2(map = citymap)\n\nmap\n```\n\n\nColumn {data-width=250 .tabset .tabset-fade}\n-----------------------------------------------------------------------\n\n### Beats\n\n```{r nondisBeats}\n\ndat <- cfs.df %>%\n    rename(GEOBeat = IncidentBeat) %>%\n    filter(discretionary == FALSE)\n#kable(nestedbeattable(dat),\n#      col.names = c(\"Section\", \"Beat\", \"Count\"))\nDT::datatable(nestedbeattable(dat) %>% mutate(Beat = factor(Beat)),\n              rownames = FALSE,\n              colnames = c(\"Section\", \"Beat\", \"Count\"),\n              options = list(pageLength = 100,\n                             dom = 't',\n                             ordering = FALSE,\n                             columnDefs = list(list(className = 'dt-right', targets = 0:2))))\n\n```\n\n### Call Type Distribution\n\n```{r nondisCallTypeDistro}\n#Histogram of call types - with grayed out error bars showing control limits for calltypes\n\ntab <- filter(cfs.df, discretionary == FALSE) %>%\n    count(CallTypeCode) %>%\n    arrange(desc(n)) %>%\n    mutate(Prop = n / sum(n)) %>%\n    filter(Prop > .01) %>%\n    rename(Count = n) %>%\n    mutate(CallTypeCode = factor(CallTypeCode, ordered = TRUE),\n           CallTypeCode = fct_reorder(CallTypeCode, Count))\n\nplot_ly(\n    data = tab,\n    y = ~CallTypeCode,\n    x = ~Count,\n    type = \"bar\"\n    ) %>% \n    layout(yaxis = list(title = \"\"),\n           xaxis = list(title = \"\", exponentformat = \"none\"))\n\n```\n\nDiscretionary CFS\n=======================================================================\n\nColumn {data-width=500}\n-----------------------------------------------------------------------\n\n```{r disTitle, fig.align='center', fig.height = 1}\n\npar(mar=c(0,0,0,0))\nplot(c(0, 1000), c(0, 20), type = 'n', xlab = '', ylab = '', xaxt = 'n', yaxt ='n', bty = 'n')\nrect(0, 0, 1000, 20, col = 'white', border = 'darkgrey', lwd = 1)\ntext(x = 500, y = 10, labels = \"Discretionary calls for service\", cex = 2, col = 'black')\n\n```\n\n### On scene time since `r begindate`\n\n```{r}\nonscenetime <- cfs.df %>% \n    filter(discretionary == TRUE & \n               #RPD_Anscombe_Trans == 1 &\n               ! CallTypeCode %in% c(\"FACIT\", \"TECH\")) %>%\n    group_by(CallTypeCode) %>% \n    summarise(MedianOnSceneTime = median(DispatchToClearedTime),\n              Count = n()) %>%\n    arrange(desc(Count)) %>%\n    mutate(Prop = Count / sum(Count)) %>%\n    filter(Prop > .01)\n    \nplot_ly(\n    type = \"scatter\",\n    mode = \"markers\", \n    data = onscenetime,\n    x = ~CallTypeCode,\n    y = ~MedianOnSceneTime,\n    size = ~(Prop^Prop),\n    hovertext = ~paste0(CallTypeCode, \n                        \"<br>\",\n                        \"Median \", round(MedianOnSceneTime, 0), \" minutes on scene\", \n                        \"<br>\",\n                        (round(Prop * 100, 0)), \"% of all discretionary calls\" ),\n    hoverinfo = \"text\"\n    ) %>%\n    layout(xaxis = list(title = \"\"),\n           yaxis = list(title = \"\"),\n           title = \"CFS dispatch to cleared time distribution\")\n```\n\n\n### Aoristic heatmap\n\n```{r disAoristic}\n\nmat <- aoristicDayWeek(filter(cfs.df, discretionary == TRUE))\n#hmap <- d3heatmap(mat, Rowv = FALSE, Colv = FALSE, colors = brewer.pal(name = \"Reds\", n = 9))\nplotlyhmap(mat)\n\n```\n\nColumn {data-width=500 .tabset .tabset-fade}\n-----------------------------------------------------------------------\n\n### YTD Hotspot map\n\n```{r disYTDmap}\n\nmap <- cfs.df %>% \n    filter(discretionary == TRUE & ! GEOCodedLocation %in% exclude) %>%\n    left_join(y = loc, by = \"GEOCodedLocation\") %>%\n    filter(! is.na(Lng)) %>%\n    cfsHotspotMap2(markers = FALSE, map = citymap)\n\nmap\n```\n\n### 28 day Hotspot map\n\n```{r dis28daymap}\n\nmap <- cfs.df %>% \n    filter(discretionary == TRUE & ! GEOCodedLocation %in% exclude) %>%\n    filter(SevenDaysGroup >= curr.week - 3) %>%\n    left_join(y = loc, by = \"GEOCodedLocation\") %>%\n    filter(! is.na(Lng)) %>%\n    cfsHotspotMap2(map = citymap)\n\nmap\n```\n\n\nColumn {data-width=250 .tabset .tabset-fade}\n-----------------------------------------------------------------------\n\n### Beats\n\n```{r disBeats}\n\ndat <- cfs.df %>%\n    rename(GEOBeat = IncidentBeat) %>%\n    filter(discretionary == TRUE)\n#kable(nestedbeattable(dat),\n#      col.names = c(\"Section\", \"Beat\", \"Count\"))\nDT::datatable(nestedbeattable(dat) %>% mutate(Beat = factor(Beat)),\n              rownames = FALSE,\n              colnames = c(\"Section\", \"Beat\", \"Count\"),\n              options = list(pageLength = 100,\n                             dom = 't',\n                             ordering = FALSE,\n                             columnDefs = list(list(className = 'dt-right', targets = 0:2))))\n\n```\n\n### Call Type Distribution\n\n```{r discalltypedistro}\n#Histogram of call types - with grayed out error bars showing control limits for calltypes\n\ntab <- filter(cfs.df, discretionary == TRUE) %>%\n    count(CallTypeCode) %>%\n    arrange(desc(n)) %>%\n    mutate(Prop = n / sum(n)) %>%\n    filter(Prop > .01) %>%\n    rename(Count = n) %>%\n    mutate(CallTypeCode = factor(CallTypeCode, ordered = TRUE),\n           CallTypeCode = fct_reorder(CallTypeCode, Count))\n\nplot_ly(\n    data = tab,\n    y = ~CallTypeCode,\n    x = ~Count,\n    type = \"bar\"\n    ) %>% \n    layout(yaxis = list(title = \"\"),\n           xaxis = list(title = \"\", exponentformat = \"none\"))\n\n```\n\nReference\n======================================================================\n\n\nColumn{data-width=200}\n-------------------------------------------------------------------------------\n\n### Action limits explained\n\nThe Rochester Police Department is shifting towards the use of \"process control\" and away from year to year comparison statistics. The goal is to be able to compare current crime counts against a benchline of \"normal\", rather than the benchline of the previous year (which may have been very high or very low compared to past years).\n\nThe Office of Business Intelligence has calculated \"action limits\" which you can see represented as dashed lines on the projection plots. These limits (both upper and lower) are calculated by using weighted 3 year averages as centering values, and then calculating the standard deviations to find how much variation from that average to expect.\n\nIf current counts for a section and crimetype break the upper action limit, it's a signal to investigate the causes of that rise in activity. If current counts break the lower action limit, it's a signal that there may be a beneficial intervention that can be studied and copied in other sections.\n\nVariation within the action limits is assumed to be normal \"statistical noise\" not requiring attention or resources above the section level.\n\nColumn{.tabset}\n----------------------------------------------------------------------\n\n### Aoristic\n\nAn aoristic heatmap shows the proportion of activity that occurs in a given hour, on a given day of the week. Lighter shades correspond with less activity, while darker red shades correspond with more activity. We have placed vertical lines that divide between first, second and third platoon hours, and as you can see from the bottom axis, the chart begins at 2300 hrs.\n\nThe rectangle labeled \"Hr23\" corresponds with the amount of activity occuring between 2300 and 2359 hrs on that day of the week. For calls that span hours, the weight of that call is divided evenly between the hour of dispatch and the hour it was cleared. For instance, the weight for a FGHTA call that was dispatched at 0800 and cleared at 1200 will be spread out evenly between Hr8, Hr9, Hr10 and Hr11.\n\n![](Z:/Projects/dashboard/RPDCrimeDashboard/Objects/ReferenceAoristicPlot.png)\n\n### Maps\n\nBoth the discretionary and non-discretionary pages show two different maps, each in their own tab. The first tab will show a Year-To-Date map, and the second tab will show a map of the last 28 days. The maps display hotspots only for the year to date map, as including markers for each call for service YTD would be overwhelming. The past 28 days map shows both individual addresses and hotspots. Clicking on an address will show a table of the types of calls there in the past 28 days. You may need to zoom in to see the hotspots, due to the amount of calls.\n\n![](Z:/Projects/dashboard/RPDCrimeDashboard/Objects/ReferenceMapCity.png)\n\n\n### CFS - wait time\n\nThe non-discretionary graph shows the average RPD response time for various call for service types. The graph is split up into Critical, Urgent and Normal call for service types. Only call for service types that total one percent or more of the total number of non-discretionary calls are displayed. This is still a large number of calls, and was too large to display the name of each call type at the bottom of the graph. Therefore to see the call type name displayed, simply hover your cursor over the relevant circle on the graph (in the real chart; not the reference chart).\n\nThe circle size represents the call volume for that type of call. Large circles are for frequent call types, smaller circles are for infrequent call types (but that still represent more than 1% of total non-discretionary calls).\n\n![](Z:/Projects/dashboard/RPDCrimeDashboard/Objects/ReferenceNonDiscretionaryCFSPlot.png)\n\n\n\n### CFS - time spent\n\nThe discretionary graph shows the average time spent on a call by officers at the most common discretionary calls in that section (or city-wide, in the city-wide dashboard). Only calls for service that account for more than one percent of the total number of discretionary calls are displayed. \n\nThe size of the circle corresponds with how frequently officers answer that call for service. There are far more TSTOB calls than OOPSB calls, therefore the TSTOB circle is far larger than the OOPSB circle.\n\nCalls are arranged alphabetically along the x axis, and the location of the corresponding circle on the y axis indicates the amount of time spent on the call on average. Only calls that we believe were coded correctly (for on scene time, clear time, etc.) are used to calculate the amount of time spent.\n\n\n![](Z:/Projects/dashboard/RPDCrimeDashboard/Objects/ReferenceDiscretionaryCFSPlot.png)\n",
    "created" : 1513191503201.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1450097395",
    "id" : "88385F5B",
    "lastKnownWriteTime" : 1513192325,
    "last_content_update" : 1513192325990,
    "path" : "//cor.local/RPD/Chief/OBI/Projects/dashboard/RPDCrimeDashboard/CrimeDashboardRepo/CallsForServiceCitywide.RMD",
    "project_path" : "CallsForServiceCitywide.RMD",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}